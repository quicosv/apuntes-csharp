Ensamblados propios


Cuando creamos un proyecto ya tenemos unos cuantos ensamblados agregados automáticamente porque Microsoft ha pensado que son los más comunes para las tareas que se seuelen llevar a cabo en ese tipo de proyecto. Se pueden añadir otros ensamblados, por ejemplo a través del gestor de paquetes nuget, pero en este caso vamos a construir nuestro propio ensamblado para luego referenciarlo en un proyecto.

En el explorador de soluciones ubicaremos nuestro proyecto, desplegaremos el menú de contexto y usaremos la opción de cerrar solución. A continuación crearemos un nuevo proyecto de tipo "Biblioteca de clases, Library" que se llamará "MiBiblioteca". observaremos que tenemos un archivo llamado "Class1.cs". Renombraremos la clase y crearemos un par de métodos. Uno extraerá el código de una página web y lo devolverá a quien lo llamó. el otro escribirá el código de la web en un fichero. Nuestra primera versión quedaría así:

(Código: carpeta 15 archivo 1)

Podemos mejorarlo creando un método privado que se encargue de traer el contenido de la web.

(Código: carpeta 15 archivo 2)

Así es como hemos encapsulado la funcionalidad de obtener la web.

Una vez terminado el trabajo es momento de compilar la solución. Para eso podemos acudir al explorador de soluciones, ir al nombre de nuestro proyecto y elegir la opción compilar en el menú cuntextual. Cerraremos la solución de este proyecto (también desde el menú contextual en el explorador de soluciones).

Para poder usar convenientemente la biblioteca en una aplicación crearemos una solución que va a contener a los dos proyectos.

Abrmos la terminal en la carpeta en la que tengamos todos los proyectos y ejecutamos este comando para crear la solución.

dotnet new sln

La solución se llamará como la carpeta en la que estemos.

Ahora crearemos el proyecto de la biblioteca de clases. Para no confundirlo con el anterior le llamaremos "FuentesWeb". En vez de crearlo desde Visual Studio Code lo crearemos desde la terminal con este comando:

dotnet new classlib -o FuentesWeb

Una vez que tenemos el proyecto creado hay que decirle que lo añada a la solución. Eso se hace con este comando:

dotnet sln solucion.sln add FuentesWeb/FuentesWeb.csproj

Aquí "solcuion.sln" representa el nombre del archivo de la solución. Si hubiera una única solución en esa carpeta no haría falta ponerlo.

Ahora ya se puede abrir Class1.cs de FuentesWeb y hacer el código. Por simplicidad, vamos a copiar y pegar la última versión que teníamos e nuestra clase.

Compilaremos el proyecto para awegurarnos de que no hay errores con este comando.

dotent build

Luego creamos el proyecto de consola:

dotnet new console -o ClienteFuentesWeb

Añadimos el proyecto a la solución:

dotnet sln solucion.sln add ClienteFuentesWeb/ClienteFuentesWb.csproj

Añadimos la referencia a la biblioteca.

dotnet add ClienteFuentesWeb/ClienteFuentesWeb.csproj FuentesWeb\FuentesWeb.csproj

Ahora ya se puede editar el archivo Program.cs en el proyecte ClienteFuentesWeb y comprobar que cuando usamos la clase Visual Studio Code añade el using que corresponde.