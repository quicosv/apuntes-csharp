Trabajar con cadenas

Muchos de los tipos de aplicaciones que se desarrollan requieren trabajar con texto, ya sea para mostrárselo al usuario o para manipularlo de alguna forma. Un buen ejemplo es extraer datos de un fichero o de una base de datos y eliminar ciertos caracteres o añadir ciertos otros para que ese texto esté en otro formato listo para ser guardado en un archivo con un formato diferente al original o para ser tratado por otro software. Ya sea para mostrar mensajes o para convertir información a otro formato, la manipulación de los datos es una habilidad esencial.

Además, las cadenas de texto pueden contener una gran cantidad de información, así que el desarrollador tiene la responsabilidad de trabajar con esos datos de forma eficiente, porque esos datos pueden ocupar mucha memoria y requerir una gran capacidad del procesador.

Es importante entender que tenemos clases que nos proveen de herramientas para trabajar con cadenas de una manera eficiente. en esta lección aprenderemos manipulación simple de cadenas como inserción de caracteres especiales, formatear en las cadenas datos como números y fechas u operaciones en cadenas como eliminar, buscar o reemplazar elementos.

La barra invertida

La barre invertida se usa para introducir las denominadas "secuencias de escape". esto nos permite insertar en las cadenas caracteres especiales. Por ejemplo, si quisiéramos mostrar en pantalla el carácter de comillas dobles necesitamos una forma de decirle a C# que no estamos empezando ni terminando una cadena. Para eso tenemos que poner una barra invertida delante de cada signo de comillas dobles que queramos insertar.

(Código: carpeta 9 archivo 1)

Con \n insertamos una nueva línea.

(Código: carpeta 9 archivo 2)

Para insertar una barra invertida tendríamos que poner dos barras invertidas seguidas.

(Código: carpeta 9 archivo 3)

Otra opción para solucionar estos problemas es poner un signo de arroba delante del de abrir comillas. Aquí sucedería lo siguiente:

- La barra invertida se interpreta como tal.
- Cuando necesitemos una nueva línea tan solo habrá que pulsar enter.
- Para insertar el signo de comillas habrá que poner dos comillas seguidas.

Un ejemplo que lo combina todo:

(Código: carpeta 9 archivo 4)

Formatear cadenas

Ya habíamos hablado de cómo sustituir cierto texto en cadenas con ejemplos como éstos:

(Código: carpeta 9 archivo 5)

Podemos usar algunas letras mayúsculas junto a los códigos de sustitución para formatear las cadenas. He aquí algunos ejemplos:

Si al lado del número ponemos dos puntos y una C estaremos representando una cantidad en la unidad monetaria que tenga configurado el ordenador.

(Código: carpeta 9 archivo 6)

Si ponemos dos puntos y una N representaremos números grandes:

(Código: carpeta 9 archivo 7)

También se puede usar la P para porcentajes.

(Código: carpeta 9 archivo 8)

También podemos mostrar un número con nuestro propio formato personalizado. Para ello bastará con sustituir cada caracter por el símbolo de almohadilla. Supongamos que el usuario es de los que se aprende su teléfono móvil con un grupo donde están los tres primeros números y luego el resto por parejas. Entonces lo pondríamos así:

(Código: carpeta 9 archivo 9)

Transformación de cadenas

el método substring nos permite extraer un trozo de una cadena. Si pasamos un único argumento, éste será el comienzo de la cadena a extraer. Recordemos que el primer caracter de la cadena ocupa la posición 0.

(Código: carpeta 9 archivo 10)

Esto extraería "lugar del aMancha".

Con un segundo argumento podemos especificar la cantidad de caracteres a extraer. Por ejemplo, para obtener la palabra "lugar" haríamos así:

(Código: carpeta 9 archivo 11)

El método toUpper lo convierte todo a mayúsculas.

(Código: carpeta 9 archivo 12)

El método Replace toma dos argumentos: la cadena a reemplazar y la cadena por la que será reemplazada. Por ejemplo, aquí sustituimos cada espacio por un par de guiones.

(Código: carpeta 9 archivo 13)

Podemos eliminar una parte de la cadena con el método Remove. Los argumentos funcionan igual que en Substring. Por ejemplo, vamos a quitar la palabra "lugar" y el espacio que hay después de ella.

(Código: carpeta 9 archivo 14)

Si hay espacios al principio y/o al final de la cadena podemos quitarlos con el método Trim. Para demostrarlo vamos a añadir espacios tanto al principio como al final de la cadena y vamos a usar String.Format para mostrar la longitud de la cadena antes y después de aplicar Trim.

(Código: carpeta 9 archivo 15)

Hablemos ahora del operador +, que sirve para concatenar.

(Código: carpeta 9 archivo 16)

Parece que siempre se está trabajando con la misma variable, pero como las cadenas son inmutables, en realidad por cada concatenación se hace una copia del original añadiendo lo que se concatena y luego se borra el original. Por lo tanto, en este caso, el procedimiento se repite 100 veces. Este proceso es muy ineficiente. Para solucionar esto, en lugar de usar el tipo string usaremos StringBuilder. Hay que crearlo con la misma sintaxis extraña que vimos para los números aleatorios. Esta clase tiene un método Append para añadir lo que queramos.

(Código: carpeta 9 archivo 17)

La línea que aparece al principio y que empieza por using la genera automáticamente el programa al crear el StringBuilder.