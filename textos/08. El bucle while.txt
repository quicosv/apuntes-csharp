El bucle while

Recapitulemos los bucles que conocemos hasta ahora. Sabemos que el bucle for permite repetir un código un número preestablecido de veces basado en un contador, mientras que el bucle foreach permite repetir un código una vez por cada elemento de un array. En ambos casos se sabe de antemano la cantidad de veces que se repetirá el código.

¿Qué pasaría si no supiéramos de antemano cuántas veces debe repetirse el código? quizá tengamos que repetirlo hasta que se cumpla una cierta condición. En estos casos se usa el bucle while. También veremos el bucle do while, que permite que el código a repetir se ejecute al menos una vez.

El caso más obvio es crear un menú para la aplicación de consola. Empezaremos por crear un método que imprima las opciones del menú:

static void MenuPrincipal()
{
	Console.WriteLine("Escoge una opción:");
	Console.WriteLine("1. Opción 1.");
	Console.WriteLine("2. Opción 2.");
	Console.WriteLine("3. Salir.");
	string resultado = Console.ReadLine();
	if (resultado == "1")
	{
		// Código para la opción 1
	}
	else if (resultado == "2")
	{
		// Código para la opción 2
	}
	else if (resultado == "3")
	{
		// Código para salir
	}
}
MenuPrincipal();

Ahora añadimos las funciones que se ejecutarán según lo que elija el usuario.

static void ImprimirNumeros()
{
	Console.WriteLine("Imprime números.");
}

static void Adivinar()
{
	Console.WriteLine("Juego de adivinar.");
}

static void MenuPrincipal()
{
	Console.WriteLine("Escoge una opción:");
	Console.WriteLine("1. Opción 1.");
	Console.WriteLine("2. Opción 2.");
	Console.WriteLine("3. Salir.");
	string resultado = Console.ReadLine();
	if (resultado == "1")
	{
		ImprimirNumeros();
	}
	else if (resultado == "2")
	{
		Adivinar();
	}
	else if (resultado == "3")
	{
		// Código para salir
	}
}
MenuPrincipal();

Si se elige la opción 1 se imprimen números, pero luego se sale de la aplicación. ¿Qué pasaría si quisiéramos volver al menú principal? Aquí se podría usar un bucle while para decidir si se vuelve a mostrar el menú o si se sale de la aplicación.

Empezaremos por crear una variable de tipo booleano con la que decidiremos si se muestra o no el menú. Esta nueva línea se pondrá justo antes de llamar a la función que muestra el menú. De momento, el programa queda así:

static void ImprimirNumeros()
{
	Console.WriteLine("Imprime números.");
}

static void Adivinar()
{
	Console.WriteLine("Juego de adivinar.");
}

static void MenuPrincipal()
{
	Console.WriteLine("Escoge una opción:");
	Console.WriteLine("1. Opción 1.");
	Console.WriteLine("2. Opción 2.");
	Console.WriteLine("3. Salir.");
	string resultado = Console.ReadLine();
	if (resultado == "1")
	{
		ImprimirNumeros();
	}
	else if (resultado == "2")
	{
		Adivinar();
	}
	else if (resultado == "3")
	{
		// Código para salir
	}
}
bool mostrarMenu = true;
MenuPrincipal();

Ahora crearemos un bucle while con ayuda del autocompletado de while, While Loop. Dentro de los paréntesis comprobaremos si mostrarMenu es verdadero (true) y en el cuerpo llamaremos a MenuPrincipal:

static void ImprimirNumeros()
{
	Console.WriteLine("Imprime números.");
}

static void Adivinar()
{
	Console.WriteLine("Juego de adivinar.");
}

static void MenuPrincipal()
{
	Console.WriteLine("Escoge una opción:");
	Console.WriteLine("1. Opción 1.");
	Console.WriteLine("2. Opción 2.");
	Console.WriteLine("3. Salir.");
	string resultado = Console.ReadLine();
	if (resultado == "1")
	{
		ImprimirNumeros();
	}
	else if (resultado == "2")
	{
		Adivinar();
	}
	else if (resultado == "3")
	{
		// Código para salir
	}
}
bool mostrarMenu = true;
while (mostrarMenu == true)
{
	MenuPrincipal();
}

Ahora tenemos que modificar la función MenuPrincipal para que dé un valor booleaano u otro (verdadero o falso) dependiendo de si el usuario escoge salir o cualquiera de las otras opciones. Finalmente, igualaremos el valor de mostrarMenu a lo que devuelva la función.

Para establecer lo que devuelve la función, además de que sea tipo bool tendremos que crear dentro una variable de tipo bool que sea true inicialmente y que sea false cuando el usuario decida salir. Además, habrá que usar return para devolver el valor de dicha variable. Ahora el código queda de esta forma:

static void ImprimirNumeros()
{
	Console.WriteLine("Imprime números.");
}

static void Adivinar()
{
	Console.WriteLine("Juego de adivinar.");
}

static bool MenuPrincipal()
{
	bool valor = true;
	Console.WriteLine("Escoge una opción:");
	Console.WriteLine("1. Opción 1.");
	Console.WriteLine("2. Opción 2.");
	Console.WriteLine("3. Salir.");
	string resultado = Console.ReadLine();
	if (resultado == "1")
	{
		ImprimirNumeros();
	}
	else if (resultado == "2")
	{
		Adivinar();
	}
	else if (resultado == "3")
	{
		valor = false;
	}
	return valor;
}

bool mostrarMenu = true;

while (mostrarMenu == true)
{
	mostrarMenu=MenuPrincipal();
}

Podemos modificar el programa. En la condición del while no es necesario poner mostrarMenu==true. Recordemos que, por ejemplo en los condicionales, queremos evaluar si una expresión es verdadera pero no ponemos el ==true porque C# ya evalúa si eso es verdadero o falso. Así queda el programa con el bucle modificado:

static void ImprimirNumeros()
{
	Console.WriteLine("Imprime números.");
}

static void Adivinar()
{
	Console.WriteLine("Juego de adivinar.");
}

static bool MenuPrincipal()
{
	bool valor = true;
	Console.WriteLine("Escoge una opción:");
	Console.WriteLine("1. Opción 1.");
	Console.WriteLine("2. Opción 2.");
	Console.WriteLine("3. Salir.");
	string resultado = Console.ReadLine();
	if (resultado == "1")
	{
		ImprimirNumeros();
	}
	else if (resultado == "2")
	{
		Adivinar();
	}
	else if (resultado == "3")
	{
		valor = false;
	}
	return valor;
}

bool mostrarMenu = true;

while (mostrarMenu)
{
	mostrarMenu = MenuPrincipal();
}

Vamos a extender el programa y a codificar el juego de imprimir números.

El juego de imprimir los números consiste en escribir un número y usar un bucle while para imprimir los valores desde el 1 hasta el número que ha escrito el usuario.

Lo primero a destacar es cómo recogemos un número. Lo que se hace es usar int.Parse para convertir a entero lo que viene ce Console.WriteLine (que es una cadena).

Por último, hemos hecho una modificación tanto en esta función como en la función que muestra el menú. Hemos usado Console.Clear para borrar todo lo que hubiera en la pantalla. Ésta es la versión actual del código:

static void ImprimirNumeros()
{
	Console.Clear();
	Console.WriteLine("Imprime números.");
	Console.Write("Escribe un número: ");
	int resultado = int.Parse(Console.ReadLine());
	int contador = 1;
	while (contador < resultado + 1)
	{
		Console.Write(contador);
		Console.Write(" ");
		contador++;
	}
}

static void Adivinar()
{
	Console.WriteLine("Juego de adivinar.");
}

static bool MenuPrincipal()
{
	bool valor = true;
	Console.Clear();
	Console.WriteLine("Escoge una opción:");
	Console.WriteLine("1. Opción 1.");
	Console.WriteLine("2. Opción 2.");
	Console.WriteLine("3. Salir.");
	string resultado = Console.ReadLine();
	if (resultado == "1")
	{
		ImprimirNumeros();
	}
	else if (resultado == "2")
	{
		Adivinar();
	}
	else if (resultado == "3")
	{
		valor = false;
	}
	return valor;
}

bool mostrarMenu = true;

while (mostrarMenu)
{
	mostrarMenu = MenuPrincipal();
}

Lo siguiente será programar el juego de adivinar. Para ello, una vez borrada la pantalla, generaremos un número aleatorio que el usuario tendrá que adivinar.

Para generar un número aleatorio tenemos que crear una instancia de la clase Random. En una lección futuro se explicará esto.

	Random aleatorio = new Random();

Insisto. No importa que esto no tenga sentido ahora. Ya se explicará. Una vez hecho esto ya se puede crear el número aleatorio.

Queremos crear un número aleatorio entre 1 y 10. Para ello usamos el método Next y le pasamos como parámetros el mínimo (1) y el primer valor que quedará fuera del rango (en este caso, 11).

int adivinar = aleatorio.Next(1,11);

A partir de aquí, crearemos una variable para saber la cantidad de intentos que lleva el usuario y otra para saber si el usuario acierta el número o no. En este caso, vamos a usar un bucle do while porque queremos que ese código se ejecute por lo menos una vez. Una vez más, Visual Studio Code nos ayuda y podemos usar do, do...while Loop para construir este bloque.

Dentro del bucle pedimos un número al usuario, incrementamos el número de intentos y comparamos el número con el aleatorio generado. Si le número es igual ajustamos el valor booleano para salir del bucle. Una vez finalizado el do while se informa al usuario de la cantidad de intentos que le ha llevado adivinar el número. Aquí está el código completo.

static void ImprimirNumeros()
{
	Console.Clear();
	Console.WriteLine("Imprime números.");
	Console.Write("Escribe un número: ");
	int resultado = int.Parse(Console.ReadLine());
	int contador = 1;
	while (contador < resultado + 1)
	{
		Console.Write(contador);
		Console.Write(" ");
		contador++;
	}
}

static void Adivinar()
{
	Console.Clear();
	Console.WriteLine("Juego de adivinar.");
	Random aleatorio = new Random();
	int adivinar = aleatorio.Next(1, 11);
	int intentos = 0;
	bool incorrecto = true;
	do
	{
		Console.WriteLine("Adivina un número entre 1 y 10.");
		Console.Write("Número: ");
		int resultado = int.Parse(Console.ReadLine());
		intentos++;
		if (resultado == adivinar)
		{
			Console.WriteLine("¡Muy bine!");
			incorrecto = false;
		}
		else
		{
			Console.WriteLine("No, ese número no es.");
		}
	} while (incorrecto);
	Console.WriteLine("Lo has adivinado en {0} intentos.", intentos);
}

static bool MenuPrincipal()
{
	bool valor = true;
	Console.Clear();
	Console.WriteLine("Escoge una opción:");
	Console.WriteLine("1. Opción 1.");
	Console.WriteLine("2. Opción 2.");
	Console.WriteLine("3. Salir.");
	string resultado = Console.ReadLine();
	if (resultado == "1")
	{
		ImprimirNumeros();
	}
	else if (resultado == "2")
	{
		Adivinar();
	}
	else if (resultado == "3")
	{
		valor = false;
	}
	return valor;
}

bool mostrarMenu = true;

while (mostrarMenu)
{
	mostrarMenu = MenuPrincipal();
}